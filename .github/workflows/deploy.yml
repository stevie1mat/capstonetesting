name: Build & Deploy to Azure Container Apps

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: trademinutesacr
  RESOURCE_GROUP: TradeMinutes-RG1
  CONTAINERAPP_ENV: trademinutes-env
  LOCATION: eastus
  FRONTEND_APP_NAME: trademinutes-frontend
  BACKEND_APP_NAME: trademinutes-users-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) Checkout & Azure Login
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Azure login with OIDC
      uses: azure/login@v1
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 2) Ensure Infra Exists
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Ensure Resource Group and Container App Environment exist
      shell: bash
      run: |
        echo "üìÅ Checking if resource group exists..."
        if ! az group show --name $RESOURCE_GROUP &>/dev/null; then
          echo "üì¶ Creating resource group: $RESOURCE_GROUP"
          az group create --name $RESOURCE_GROUP --location $LOCATION
        else
          echo "‚úÖ Resource group exists."
        fi

        echo "üåç Checking if container app environment exists..."
        if ! az containerapp env show \
             --name $CONTAINERAPP_ENV \
             --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "üåç Creating container app environment..."
          az containerapp env create \
            --name $CONTAINERAPP_ENV \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION
        else
          echo "‚úÖ Container App environment exists."
        fi

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 3) ACR Login
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Login to Azure Container Registry
      run: az acr login --name $ACR_NAME

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 4) Build and Deploy Backend
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Build & Push users-api image
      run: |
        docker build \
          --platform=linux/amd64 \
          -t $ACR_NAME.azurecr.io/users-api:${{ github.sha }} ./trademinutes-auth
        docker push $ACR_NAME.azurecr.io/users-api:${{ github.sha }}

    - name: Deploy users-api container app
      run: |
        if ! az containerapp show \
          --name $BACKEND_APP_NAME \
          --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "üöÄ Creating backend app (first run)‚Ä¶"
          az containerapp create \
            --name $BACKEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }} \
            --target-port 8080 \
            --ingress internal
        else
          echo "üîÅ Updating backend app image..."
          az containerapp update \
            --name $BACKEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }}
        fi

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 5) Get Backend FQDN
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Get backend FQDN for frontend
      id: backend
      run: |
        FQDN=$(az containerapp show \
          --name $BACKEND_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn \
          -o tsv)
        echo "API_URL=https://$FQDN" >> $GITHUB_ENV
        echo "::notice title=API URL::https://$FQDN"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 6) Build and Deploy Frontend
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Build & Push frontend image
      run: |
        docker build \
          --platform=linux/amd64 \
          --build-arg NEXT_PUBLIC_API_URL=${{ env.API_URL }} \
          -t $ACR_NAME.azurecr.io/frontend:${{ github.sha }} ./trademinutes-frontend
        docker push $ACR_NAME.azurecr.io/frontend:${{ github.sha }}

    - name: Deploy frontend container app
      run: |
        if ! az containerapp show \
          --name $FRONTEND_APP_NAME \
          --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "üöÄ Creating frontend app (first run)‚Ä¶"
          az containerapp create \
            --name $FRONTEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --target-port 3000 \
            --ingress external \
            --env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        else
          echo "üîÅ Updating frontend app image..."
          az containerapp update \
            --name $FRONTEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --set-env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        fi
