name: Build & Deploy to Azure Container Apps

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  RG_NAME: TradeMinutes-RG3
  LOCATION: eastus
  ACR_NAME: trademinutesacr3
  CONTAINERAPP_ENV: trademinutes-env3
  BACKEND_APP_NAME: trademinutes-users-api
  FRONTEND_APP_NAME: trademinutes-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Ensure Resource Group exists
      run: |
        az group show --name $RG_NAME || az group create --name $RG_NAME --location $LOCATION

    - name: Create ACR if not exists
      run: |
        az acr show --name $ACR_NAME --resource-group $RG_NAME || \
        az acr create --resource-group $RG_NAME --name $ACR_NAME --sku Basic --admin-enabled true

    - name: Create Container App Env if not exists
      run: |
        az containerapp env show --name $CONTAINERAPP_ENV --resource-group $RG_NAME || \
        az containerapp env create \
          --name $CONTAINERAPP_ENV \
          --resource-group $RG_NAME \
          --location $LOCATION

    - name: Login to ACR
      run: az acr login --name $ACR_NAME

    # ‚îÄ‚îÄ‚îÄ Build and Push Backen ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Build & Push users-api
      run: |
        docker build -t $ACR_NAME.azurecr.io/users-api:${{ github.sha }} ./trademinutes-auth
        docker push $ACR_NAME.azurecr.io/users-api:${{ github.sha }}

    # ‚îÄ‚îÄ‚îÄ Deploy or Update Backend App ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Deploy or Update Backend App
      run: |
        if az containerapp show --name $BACKEND_APP_NAME --resource-group $RG_NAME >/dev/null 2>&1; then
          echo "üîÅ Backend exists. Updating..."
          az containerapp update \
            --name $BACKEND_APP_NAME \
            --resource-group $RG_NAME \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }}

          INGRESS_TYPE=$(az containerapp show \
            --name $BACKEND_APP_NAME \
            --resource-group $RG_NAME \
            --query properties.configuration.ingress.external \
            -o tsv)

          if [ "$INGRESS_TYPE" != "true" ]; then
            echo "‚öôÔ∏è Setting ingress to external for backend..."
            az containerapp ingress enable \
              --name $BACKEND_APP_NAME \
              --resource-group $RG_NAME \
              --type external
          fi
        else
          echo "üöÄ Creating backend app..."
          az containerapp create \
            --name $BACKEND_APP_NAME \
            --resource-group $RG_NAME \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }} \
            --target-port 8080 \
            --ingress external \
            --registry-server $ACR_NAME.azurecr.io \
            --env-vars \
              PORT=8080 \
              MONGO_URI=secretref:mongo-uri \
              DB_NAME=secretref:db-name \
              JWT_SECRET=secretref:jwt-secret \
              JWT_RESET_SECRET=secretref:jwt-reset-secret \
              SMTP_HOST=secretref:smtp-host \
              SMTP_PORT=secretref:smtp-port \
              SMTP_USER=secretref:smtp-user \
              SMTP_PASS=secretref:smtp-pass \
              EMAIL_FROM=secretref:email-from \
              FRONTEND_URL=secretref:frontend-url
        fi

    # ‚îÄ‚îÄ‚îÄ Push Secrets to Azure Container App ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Push secrets to Azure Container App
      run: |
        az containerapp secret set \
          --name $BACKEND_APP_NAME \
          --resource-group $RG_NAME \
          --secrets \
            mongo-uri='${{ secrets.MONGO_URI }}' \
            db-name='${{ secrets.DB_NAME }}' \
            jwt-secret='${{ secrets.JWT_SECRET }}' \
            jwt-reset-secret='${{ secrets.JWT_RESET_SECRET }}' \
            smtp-host='${{ secrets.SMTP_HOST }}' \
            smtp-port='${{ secrets.SMTP_PORT }}' \
            smtp-user='${{ secrets.SMTP_USER }}' \
            smtp-pass='${{ secrets.SMTP_PASS }}' \
            email-from='${{ secrets.EMAIL_FROM }}' \
            frontend-url='${{ secrets.FRONTEND_URL }}'

    # ‚îÄ‚îÄ‚îÄ Link ENV Vars to Secrets using secretref ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Inject secret-based env vars into backend
      run: |
        az containerapp update \
          --name $BACKEND_APP_NAME \
          --resource-group $RG_NAME \
          --set-env-vars \
            PORT=8080 \
            MONGO_URI=secretref:mongo-uri \
            DB_NAME=secretref:db-name \
            JWT_SECRET=secretref:jwt-secret \
            JWT_RESET_SECRET=secretref:jwt-reset-secret \
            SMTP_HOST=secretref:smtp-host \
            SMTP_PORT=secretref:smtp-port \
            SMTP_USER=secretref:smtp-user \
            SMTP_PASS=secretref:smtp-pass \
            EMAIL_FROM=secretref:email-from \
            FRONTEND_URL=secretref:frontend-url

    # ‚îÄ‚îÄ‚îÄ Fetch Backend URL for Frontend ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Get backend URL
      id: backend
      run: |
        BACKEND_URL=$(az containerapp show \
          --name $BACKEND_APP_NAME \
          --resource-group $RG_NAME \
          --query properties.configuration.ingress.fqdn -o tsv)
        echo "API_URL=https://$BACKEND_URL" >> $GITHUB_ENV
        echo "::notice title=Backend API URL::https://$BACKEND_URL"

    # ‚îÄ‚îÄ‚îÄ Build and Push Frontend ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Build & Push frontend
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_API_URL=${{ env.API_URL }} \
          -t $ACR_NAME.azurecr.io/frontend:${{ github.sha }} ./trademinutes-frontend
        docker push $ACR_NAME.azurecr.io/frontend:${{ github.sha }}

    # ‚îÄ‚îÄ‚îÄ Deploy Frontend Container App ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - name: Deploy Frontend Container App
      run: |
        if az containerapp show --name $FRONTEND_APP_NAME --resource-group $RG_NAME >/dev/null 2>&1; then
          echo "üîÅ Frontend exists. Updating..."
          az containerapp update \
            --name $FRONTEND_APP_NAME \
            --resource-group $RG_NAME \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --set-env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        else
          echo "üöÄ Creating frontend app..."
          az containerapp create \
            --name $FRONTEND_APP_NAME \
            --resource-group $RG_NAME \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --target-port 3000 \
            --ingress external \
            --registry-server $ACR_NAME.azurecr.io \
            --env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        fi
