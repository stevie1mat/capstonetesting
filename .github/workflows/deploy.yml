name: Build & Deploy to Azure Container Apps

on:
  push:
    branches: [main]

permissions:
  id-token: write        # OIDC login
  contents: read

env:
  ACR_NAME:           ${{ secrets.ACR_NAME }}
  RESOURCE_GROUP:     ${{ secrets.RESOURCE_GROUP }}
  CONTAINERAPP_ENV:   ${{ secrets.CONTAINERAPP_ENV }}
  BACKEND_APP_NAME:   trademinutes-users-api
  FRONTEND_APP_NAME:  trademinutes-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # â”€â”€â”€ 1) Checkout & Azure login â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure login (OIDC)
      uses: azure/login@v1
      with:
        client-id:       ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Login to ACR
      run: az acr login --name $ACR_NAME

    # â”€â”€â”€ 2) Build & push BACKEND image â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Build & Push users-api
      run: |
        docker build --platform=linux/amd64 \
          -t $ACR_NAME.azurecr.io/users-api:${{ github.sha }} \
          ./trademinutes-auth
        docker push $ACR_NAME.azurecr.io/users-api:${{ github.sha }}

    # â”€â”€â”€ 3) Ensure/Update BACKEND Container App â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Deploy users-api
      shell: bash
      run: |
        if az containerapp show --name $BACKEND_APP_NAME \
             --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "ðŸ”„ Updating existing backend appâ€¦"
          az containerapp update \
            --name $BACKEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }}
        else
          echo "ðŸš€ Creating backend app (first run)â€¦"
          az containerapp create \
            --name $BACKEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/users-api:${{ github.sha }} \
            --target-port 8080 \
            --ingress internal \
            --registry-server $ACR_NAME.azurecr.io
        fi

    # â”€â”€â”€ 4) Grab BACKEND FQDN for the frontend build â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Get backend FQDN
      id: backend
      run: |
        URL=$(az containerapp show \
          --name $BACKEND_APP_NAME \
          --resource-group $RESOURCE_GROUP \
          --query properties.configuration.ingress.fqdn -o tsv)
        echo "API_URL=https://$URL" >> $GITHUB_ENV
        echo "::notice title=API URL::$URL"

    # â”€â”€â”€ 5) Build & push FRONTEND image â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Build & Push frontend
      run: |
        docker build --platform=linux/amd64 \
          --build-arg NEXT_PUBLIC_API_URL=${{ env.API_URL }} \
          -t $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
          ./trademinutes-frontend
        docker push $ACR_NAME.azurecr.io/frontend:${{ github.sha }}

    # â”€â”€â”€ 6) Ensure/Update FRONTEND Container App â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Deploy frontend
      shell: bash
      run: |
        if az containerapp show --name $FRONTEND_APP_NAME \
             --resource-group $RESOURCE_GROUP &>/dev/null; then
          echo "ðŸ”„ Updating existing frontend appâ€¦"
          az containerapp update \
            --name $FRONTEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --set-env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        else
          echo "ðŸš€ Creating frontend app (first run)â€¦"
          az containerapp create \
            --name $FRONTEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $CONTAINERAPP_ENV \
            --image $ACR_NAME.azurecr.io/frontend:${{ github.sha }} \
            --target-port 3000 \
            --ingress external \
            --registry-server $ACR_NAME.azurecr.io \
            --env-vars NEXT_PUBLIC_API_URL=${{ env.API_URL }}
        fi
